基础环境：
        OS环境：ubuntu 14.04 
        JDK环境：openJDK 1.7.0_121
        Docker环境：Docker version 1.13.1, build 092cba3
        tomcat版本：7

1、拉取基础镜像

[root@monitor:/home/mongoadmin]# docker pull unbuntu:14.04
[root@monitor:/home/mongoadmin]# docker pull tomcat:7

2、创建Dockerfile文件

[root@monitor:/home/mongoadmin/tomcat]# vi Dockerfile 
# 基础镜像  
FROM tomcat:7

# 镜像维护者
MAINTAINER leon "leon@xwf-id.com.cn"

# 应用参数设置
ENV CATALINA_OPTS="-Xms1024M -Xmx1024M -Xmn384M -Xss512K -XX:PermSize=128m -XX:MaxPermSize=128m -XX:SurvivorRatio=8 -XX:+PrintGCDetail
s -XX:+PrintGCDateStamps -Xloggc:/usr/local/tomcat/logs/gc.log -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath
=/usr/local/tomcat/logs/ -Djava.rmi.server.hostname=10.1.22.35  -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=888
8 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.rmi.port=8
888"

# 服务对外端口设置
EXPOSE 8080 8888

3、构造镜像

[root@monitor:/home/mongoadmin]# sudo docker build -t docker-registry.xwf-id.com/xwf/tomcat-test .

4、创建、启动容器

[root@monitor:/home/mongoadmin]# docker run -d -p 8088:8080 -p 8888:8888 --name tomcat-test docker-registry.xwf-id.com/xwf/tomcat-test

5、查看服务状态

[root@monitor:/home/mongoadmin/tomcat]# docker ps
CONTAINER ID        IMAGE                                        COMMAND                  CREATED             STATUS              PORTS                                                                    NAMES
b003ec30b882        docker-registry.xwf-id.com/xwf/tomcat-test   "catalina.sh run"        21 minutes ago      Up 21 minutes       0.0.0.0:8888->8888/tcp, 0.0.0.0:8088->8080/tcp                           tomcat-test
------表明容器已正常启动，若检测其是否正常运行，可通过以下命令以及日志进行验证：

[root@monitor:/home/mongoadmin/tomcat]# docker exec -it b003ec30b882 /bin/bash

[root@b003ec30b882:/usr/local/tomcat]# ps -ef|grep java
root         1     0  1 02:17 ?        00:00:15 /docker-java-home/jre/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager 
-Djdk.tls.ephemeralDHKeySize=2048 -Xms1024M -Xmx1024M -Xmn384M -Xss512K -XX:PermSize=128m -XX:MaxPermSize=128m -XX:SurvivorRatio=8 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/usr/local/tomcat/logs/gc.log -XX:+D
isableExplicitGC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/tomcat/logs/ -Djava.rmi.server.hostname=10.1.22.35 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8888 -Dcom.sun.manageme
nt.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.rmi.port=8888 -Dignore.endorsed.dirs= -classpath /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-
juli.jar -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/usr/local/tomcat/temp org.apache.catalina.startup.Bootstrap start
root        75    61  0 02:43 ?        00:00:00 grep java

[root@b003ec30b882:/usr/local/tomcat/logs]# ls -l
total 12
-rw-r--r-- 1 root root 8064 Mar  2 02:17 catalina.2018-03-02.log
-rw-r--r-- 1 root root    0 Mar  2 02:17 gc.log
-rw-r--r-- 1 root root    0 Mar  2 02:17 host-manager.2018-03-02.log
-rw-r--r-- 1 root root  602 Mar  2 02:17 localhost.2018-03-02.log
-rw-r--r-- 1 root root    0 Mar  2 02:17 localhost_access_log.2018-03-02.txt
-rw-r--r-- 1 root root    0 Mar  2 02:17 manager.2018-03-02.log
------若日志中无异常日志，且进程已存在，即表示服务已正常运行

也可以通过端口检测其是否正常运行：
root@monitor:/home/mongoadmin/tomcat# lsof -i:8088      ------此端口为tomcat对应的访问端口，可通过http://10.1.22.35:8088/进行页面确认
COMMAND     PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME
docker-pr 14205 root    4u  IPv6 40941481      0t0  TCP *:omniorb (LISTEN)

[root@monitor:/home/mongoadmin/tomcat]# lsof -i:8888     ------此端口为jmx远程监控端口，若处于监听状态表明其可进行连接、监控
COMMAND     PID USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME
docker-pr 14192 root    4u  IPv6 40936989      0t0  TCP *:8888 (LISTEN)


6、打开远程监控
利用JMC、Jconsole、Jvisualvm添加IP和JMX进行远程连接、监控
